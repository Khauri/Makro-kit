class {
  onCreate() {
    globalThis.MonacoEnvironment = globalThis.MonacoEnvironment || {
      getWorker: function (workerId, label) {
        const getWorkerModule = (moduleUrl, label) => {
          return new Worker(self.MonacoEnvironment.getWorkerUrl(moduleUrl), {
            name: label,
            type: 'module'
          });
        };
        switch (label) {
          case 'json':
            return getWorkerModule('/monaco-editor/esm/vs/language/json/json.worker?worker', label);
          case 'css':
          case 'scss':
          case 'less':
            return getWorkerModule('/monaco-editor/esm/vs/language/css/css.worker?worker', label);
          case 'html':
          case 'handlebars':
          case 'razor':
            return getWorkerModule('/monaco-editor/esm/vs/language/html/html.worker?worker', label);
          case 'typescript':
          case 'javascript':
            return getWorkerModule('/monaco-editor/esm/vs/language/typescript/ts.worker?worker', label);
          default:
            return getWorkerModule('/monaco-editor/esm/vs/editor/editor.worker?worker', label);
        }
      }
    };
  }

  onUpdate() {
    // this.editor.v
  }

  onMount = async function () {
    const monaco = await import('monaco-editor');
    const container = this.getEl();
    const editor = this.editor = monaco.editor.create(container, {
      value: ['function x() {', '  console.log("Hello world!");', '}'].join('\n'),
      language: 'javascript',
      theme: "vs-dark"
    });
    console.log(editor);
    editor.onDidChangeModelContent((...args) => {
      this.input.valueChange?.(editor.getValue());
    });
  }
}

<div class="h-full" no-update />